name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPO: scalable-webapp
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPO:${IMAGE_TAG} ./app
          docker tag $ECR_REPO:${IMAGE_TAG} ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${IMAGE_TAG}

      - name: Run security scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          ./trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${IMAGE_TAG} || true

      - name: Push image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${IMAGE_TAG}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: aws-actions/configure-kubectl@v3
        with:
          cluster-name: your-eks-cluster
          region: ${{ secrets.AWS_REGION }}

      - name: Update staging deployment
        run: |
          ./ci-cd/scripts/deploy.sh staging $IMAGE_TAG

      - name: Run integration test
        run: ./ci-cd/scripts/test.sh staging

  approval-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Wait for manual approval
        uses: hmarr/auto-approve-action@v2
        with:
          message: "Waiting for approval to deploy to production"
        # This is a placeholder. In GitHub Actions, consider using environment protection rules for manual approval.

  deploy-production:
    runs-on: ubuntu-latest
    needs: approval-production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: aws-actions/configure-kubectl@v3
        with:
          cluster-name: your-eks-cluster
          region: ${{ env.AWS_REGION }}

      - name: Update production deployment
        run: ./ci-cd/scripts/deploy.sh production $IMAGE_TAG
